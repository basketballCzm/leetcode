/*
给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。

此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。

注意:
不能使用代码库中的排序函数来解决这道题。

示例:

输入: [2,0,2,1,1,0]
输出: [0,0,1,1,2,2]
进阶：

一个直观的解决方案是使用计数排序的两趟扫描算 法。
首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。
你能想出一个仅使用常数空间的一趟扫描算法吗？

思路：使用一遍进行遍历，使用快慢指针，当前元素为0时和慢指针调整，当前元素为2时和快指针进行调整，并且当前指向的元素不变，因为是从后面调整过来还未被处理的元素
*/

class Solution {
  public:
	void sortColors(vector<int>& nums) {
		int size = nums.size();
		if (0 == size) {
			return;
		}
		int red = 0, blue = size - 1;
		for (int i = 0; i <= blue; i++) {
			if (0 == nums[i]) {
				swap(nums[i], nums[red++]);
			} else if (2 == nums[i]) {
				swap(nums[i--], nums[blue--]);
			}
		}


	}
};